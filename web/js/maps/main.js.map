{"version":3,"sources":["App.ts","main.ts","core/bootstrap.ts","core/Config.ts"],"names":["app","App","conf","Config","init","component","Bootstrap","document","addEventListener","main","Main","this","recommender","otherRecommender","prototype","$box","$","$cont","i","$clone","clone","append","ready","_bodyId","querySelector","getAttribute","_setController","_config","$gConfig","gConfigText","text","$lConfig","lConfigText","replace","length","JSON","parse","get","key","isGlobalVar"],"mappings":"AAAA,YAKA,IAAOA,MAAP,SAAOA,GACH,GAAAC,GAAA,WACI,QAAAA,KACIC,KAAKC,OAAOC,OAEZ,GAAIC,WAAUC,UAEtB,MAAAL,KANaD,GAAAC,IAAGA,GADbD,MAAAA,SAUPO,SAASC,iBAAiB,mBAAoB,WAC1C,GAAIR,KAAIC,KCdZ,IAAOQ,OAAP,SAAOA,GACH,GAAAC,GAAA,WACI,QAAAA,KACIC,KAAKC,cACLD,KAAKE,mBAwBb,MArBWH,GAAAI,UAAAF,YAAP,WAKI,IAAK,GAJDG,GAAOC,EAAE,oBAETC,EAAQD,EAAE,qCAELE,EAAG,EAAGA,EAAG,EAAGA,IAAK,CACtB,GAAIC,GAASJ,EAAKK,OACjBH,GAAMI,OAAOF,KAIfT,EAAAI,UAAAD,iBAAP,WAKI,IAAK,GAJDE,GAAOC,EAAE,+CAETC,EAAQD,EAAE,sCAELE,EAAG,EAAGA,EAAG,EAAGA,IAAK,CACtB,GAAIC,GAASJ,EAAKK,OACjBH,GAAMI,OAAOF,KAG1BT,IA3BaD,GAAAC,KAAIA,GADdD,OAAAA,UA+BPO,EAAET,UAAUe,MAAM,WACd,GAAIb,MAAKC,MChCb,IAAOL,YAAP,SAAOA,GAEH,GAAAC,GAAA,WAGI,QAAAA,KACIK,KAAKY,QAAUhB,SAASiB,cAAc,QAAQC,aAAa,MAE3Dd,KAAKe,iBAmBb,MAZYpB,GAAAQ,UAAAY,eAAR,aAYJpB,IAzBaD,GAAAC,UAASA,GAFnBD,YAAAA,cCFP,IAAOH,OAAP,SAAOA,GACH,GAAAC,GAAA,WAAA,QAAAA,MAmCA,MAhCkBA,GAAAC,KAAd,WACID,EAAOwB,QAAgB,UACvBxB,EAAOwB,QAAe,QAEtB,IAAIC,GAAWZ,EAAE,wBACba,EAAcD,EAASE,OACvBC,EAAWf,EAAE,uBACbgB,EAAcD,EAASD,OACNG,QAAQ,MAAO,KAAMA,QAAQ,MAAO,KACpCA,QAAQ,SAAU,MAAQA,QAAQ,OAAQ,KAE3DJ,GAAYK,SACZ/B,EAAOwB,QAAgB,OAAIQ,KAAKC,MAAMP,IAGtCG,EAAYE,SACZ/B,EAAOwB,QAAe,MAAIQ,KAAKC,MAAMJ,KAI/B7B,EAAAkC,IAAd,SAAkBC,EAAaC,GAC3B,GAD2B,SAAAA,IAAAA,GAAA,GACvBpC,EAAOwB,QAAS,CAChB,GAAIY,GAAepC,EAAOwB,QAAgB,OAAEW,GACxC,MAAOnC,GAAOwB,QAAgB,OAAEW,EAE/B,KAAKC,GAAepC,EAAOwB,QAAe,MAAEW,GAC7C,MAAOnC,GAAOwB,QAAe,MAAEW,GAIvC,MAAO,OAhCInC,EAAAwB,WAkCnBxB,IAnCaD,GAAAC,OAAMA,GADhBD,OAAAA","file":"main.js","sourcesContent":["'use strict';\n///<reference path=\"../lib/ts/jquery.d.ts\"/>\n///<reference path=\"./core/Config.ts\"/>\n\n///<reference path=\"./core/bootstrap.ts\"/>\nmodule app {\n    export class App {\n        constructor() {\n            conf.Config.init();\n\n            new component.Bootstrap();\n        }\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    new app.App();\n});\n","///<reference path=\"..//lib/ts/jquery.d.ts\" />\r\n\r\nmodule main {\r\n    export class Main {\r\n        constructor() {            \r\n            this.recommender();\r\n            this.otherRecommender();  \r\n        }\r\n        \r\n        public recommender() {\r\n            var $box = $('.recommend-block'),\r\n                \r\n                $cont = $('.live-recommender-container > div');\r\n            \r\n            for (var i= 0; i< 2; i++) {\r\n                var $clone = $box.clone();\r\n                 $cont.append($clone);\r\n            }\r\n        }\r\n        \r\n        public otherRecommender() {\r\n            var $box = $('.other-recommender-container .thumbnail-big'),\r\n                \r\n                $cont = $('.other-recommender-container > div');\r\n            \r\n            for (var i= 0; i< 7; i++) {\r\n                var $clone = $box.clone();\r\n                 $cont.append($clone);\r\n            }\r\n        }       \r\n    }\r\n}\r\n\r\n$(document).ready(() => {\r\n    new main.Main();\r\n});","// ///<reference path=\"../util/StringUtils.ts\" />\n\nmodule component {\n    //import StringUtils = util.StringUtils;\n    export class Bootstrap {\n        private _bodyId: any;\n\n        constructor() {\n            this._bodyId = document.querySelector('body').getAttribute('id');\n\n            this._setController();\n        }\n\n        /**\n         * Set active controller\n         * @private\n         */\n        private _setController(): void {\n            /*var controllerName: any = StringUtils.firstToUpperCase(this._bodyId + 'Controller'),\n                win: any = window;  // compailer semantic error protection\n\n            if (win['controller'][controllerName]) {\n                new win['controller'][controllerName];\n            }\n            else {\n                new win['controller']['CommonController'];\n                console.error('Controller no exist', controllerName);\n            }*/\n        }\n    }\n}\n","module conf {\n    export class Config {\n        private static _config: any = {};\n\n        public static init(): void {\n            Config._config['global'] = {};\n            Config._config['local'] = {};\n\n            var $gConfig = $('#global-js-variables'),\n                gConfigText = $gConfig.text(),\n                $lConfig = $('#local-js-variables'),\n                lConfigText = $lConfig.text()\n                                .replace(/\"{/g, '\\{').replace(/}\"/g, '\\}')\n                                .replace(/\"\\[\\{/g, '\\[\\{').replace(/}]\"/g, '\\}]');\n\n            if (gConfigText.length) {\n                Config._config['global'] = JSON.parse(gConfigText);\n            }\n\n            if (lConfigText.length) {\n                Config._config['local'] = JSON.parse(lConfigText);\n            }\n        }\n\n        public static get(key: string, isGlobalVar = true): any {\n            if (Config._config) {\n                if (isGlobalVar && Config._config['global'][key]) {\n                    return Config._config['global'][key];\n                }\n                else if (!isGlobalVar && Config._config['local'][key]) {\n                    return Config._config['local'][key];\n                }\n            }\n\n            return null;\n        }\n    }\n}\n"],"sourceRoot":"/source/"}